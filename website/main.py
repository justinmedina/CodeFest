from flask import Flask, render_template, request, redirect, session
import datetime
import requests
import google.generativeai as genai

app = Flask(__name__)
app.secret_key = "secret"

SPOTIFY_CLIENT_ID = "4b3ee564403d4f949f881d65692a0e57"
SPOTIFY_CLIENT_SECRET = "xxx"
SPOTIFY_REDIRECT_URI = "http://127.0.0.1:5000/callback"
SCOPES = ['playlist-modify-private', 'playlist-modify-public', 'ugc-image-upload']
SCOPES_URL = "%20".join(SCOPES)


genai.configure(api_key="xxx")
model = genai.GenerativeModel(model_name="gemini-pro")

def testCurrentToken():
    if 'access_token' not in session:
        return False
    test_headers = {
        "Authorization": "Bearer " + session['access_token']
    }
    test_response = requests.get("https://api.spotify.com/v1/me", headers=test_headers)
    if 200 <= test_response.status_code <= 204:
        return True
    else:
        return False

@app.route('/')
def index():
    if testCurrentToken():
        return render_template('index.html', token = session['access_token'])
    else:
        return render_template('authenticate.html')

@app.route('/authenticate')
def authenticate():
    auth_url=(
        "https://accounts.spotify.com/authorize" +
        "?client_id=" + SPOTIFY_CLIENT_ID +
        "&response_type=token" +
        "&redirect_uri=" + SPOTIFY_REDIRECT_URI +
        "&scope=" + SCOPES_URL +
        "&show_dialog=true"
    )
    return redirect(auth_url)

@app.route('/callback')
def callback():
    if request.args.get('error'):
        return "ERROR: " + request.args.get('error')
    
    return render_template('callback.html')

@app.route('/process_callback')
def process_callback():
    access_token = request.args.get('access_token')
    if access_token:
        session['access_token'] = access_token
        return redirect('/')
    else:
        return "Error: Access token not provided in callback URL"


@app.route('/generate_playlist', methods=['POST'])
def generate_playlist():
    if request.method == 'POST':
        user_input = request.form['input_text']
        genai_response = model.generate_content(f"You will give me five songs and their artists. Add a '-' between the song and the artist. Insert a '%' after each song to separate them. Do not include a '%' after the last song. Do not include multiple songs from the same artist. Each song has to reflect or be related to this prompt: {user_input}. Be sympathetic.")
        print(genai_response.text)
        playlist = genai_response.text.split("%")
        session['playlist'] = playlist
    if not testCurrentToken():
        return redirect('/authenticate')
    if len(playlist) != 1:    
        access_token = session['access_token']
        get_id_headers = {
            "Authorization": "Bearer " + access_token,
        }
        create_playlist_headers = {
            "Authorization": "Bearer " + access_token,
            "Content-Type": 'application/json'
        }
        playlist_name = f"SpotiFive {datetime.date.today()}"
        data = {
            "name": playlist_name,
            "description": "A playlist generated by SpotiFive in response to: \""+user_input+"\"."
        }

        spotify_id= requests.get("https://api.spotify.com/v1/me", headers=get_id_headers).json()['id']
        playlist_response = requests.post(f"https://api.spotify.com/v1/users/{spotify_id}/playlists", headers=create_playlist_headers, json=data)
        if playlist_response.status_code==201:
            session['playlist_id'] = playlist_response.json()['id']
            return redirect('/add_songs')
        else:
            return "ERROR CREATING PLAYLIST" + playlist_response.text
        
    else: 
        session['fail_message'] = genai_response.text
        return redirect('/generation_failed')
        
    
@app.route('/add_songs')    
def add_songs():
    playlist = session['playlist']
    song_id_uri = []
    for song in playlist:
        params = {
            "q": song,
            "type": "track",
            "limit": 1
        }
        search_headers = {
            "Authorization": "Bearer " + session['access_token']
        }
        search_response = requests.get("https://api.spotify.com/v1/search", params=params, headers=search_headers)
        song_search_results = search_response.json().get("tracks", {}).get("items", [])
        if len(song_search_results) > 0:
            current_id = str(song_search_results[0]['id'])
            song_id_uri.append("spotify:track:" + current_id)
    print("Track URIs: " + ", ".join(song_id_uri))
    data = {
        "uris": song_id_uri
    }
    add_songs_headers = {
        "Authorization": "Bearer " + session['access_token'],
        "Content-Type": "application/json"
    }
    add_songs_response = requests.post('https://api.spotify.com/v1/playlists/' + session['playlist_id'] + '/tracks', headers=add_songs_headers, json=data)
    if add_songs_response.status_code == 200:
        return redirect('/generation_complete')
    else:
        return "ERROR CODE: " + str(add_songs_response.status_code)
    
    
@app.route('/generation_complete')
def generation_complete():
    access_token = session['access_token']
    playlist_id = session['playlist_id']
    headers = {
        "Authorization": "Bearer " + access_token
    }

    playlist_response = requests.get(f"https://api.spotify.com/v1/playlists/{playlist_id}", headers=headers)
    song_list = playlist_response.json()['tracks']['items']

    song_titles = []
    song_cover_urls = []
    
    for song in song_list:
        song_id = song['track']['id']
        song_response = requests.get(f"https://api.spotify.com/v1/tracks/{song_id}", headers=headers)
        song_titles.append(song_response.json()['name'])
        song_cover_urls.append(song_response.json()['album']['images'][0]['url'])

    print(", ".join(song_titles))
    print(", ".join(song_cover_urls))
    return render_template('result.html', titles=song_titles, covers=song_cover_urls)

@app.route('/generation_failed')
def generation_failed():
    return render_template('failed.html', message=session['fail_message'])

if __name__ == '__main__':
    app.run(debug=True)
